-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema AutomaticTax
module StripeAPI.Types.AutomaticTax where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Account
import {-# SOURCE #-} StripeAPI.Types.ConnectAccountReference

-- | Defines the object schema located at @components.schemas.automatic_tax@ in the specification.
-- 
-- 
data AutomaticTax = AutomaticTax {
  -- | enabled: Whether Stripe automatically computes tax on this invoice. Note that incompatible invoice items (invoice items with manually specified [tax rates](https:\/\/stripe.com\/docs\/api\/tax_rates), negative amounts, or \`tax_behavior=unspecified\`) cannot be added to automatic tax invoices.
  automaticTaxEnabled :: GHC.Types.Bool
  -- | liability: The account that\'s liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
  , automaticTaxLiability :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable AutomaticTaxLiability'NonNullable))
  -- | status: The status of the most recent automated tax calculation for this invoice.
  , automaticTaxStatus :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable AutomaticTaxStatus'NonNullable))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AutomaticTax
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["enabled" Data.Aeson.Types.ToJSON..= automaticTaxEnabled obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("liability" Data.Aeson.Types.ToJSON..=)) (automaticTaxLiability obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (automaticTaxStatus obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["enabled" Data.Aeson.Types.ToJSON..= automaticTaxEnabled obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("liability" Data.Aeson.Types.ToJSON..=)) (automaticTaxLiability obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (automaticTaxStatus obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON AutomaticTax
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "AutomaticTax" (\obj -> ((GHC.Base.pure AutomaticTax GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "liability")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "status"))}
-- | Create a new 'AutomaticTax' with all required fields.
mkAutomaticTax :: GHC.Types.Bool -- ^ 'automaticTaxEnabled'
  -> AutomaticTax
mkAutomaticTax automaticTaxEnabled = AutomaticTax{automaticTaxEnabled = automaticTaxEnabled,
                                                  automaticTaxLiability = GHC.Maybe.Nothing,
                                                  automaticTaxStatus = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.automatic_tax.properties.liability.anyOf@ in the specification.
-- 
-- The account that\\\'s liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
data AutomaticTaxLiability'NonNullable = AutomaticTaxLiability'NonNullable {
  -- | account: The connected account being referenced when \`type\` is \`account\`.
  automaticTaxLiability'NonNullableAccount :: (GHC.Maybe.Maybe AutomaticTaxLiability'NonNullableAccount'Variants)
  -- | type: Type of the account referenced.
  , automaticTaxLiability'NonNullableType :: (GHC.Maybe.Maybe AutomaticTaxLiability'NonNullableType')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AutomaticTaxLiability'NonNullable
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (automaticTaxLiability'NonNullableAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (automaticTaxLiability'NonNullableType obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (automaticTaxLiability'NonNullableAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (automaticTaxLiability'NonNullableType obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON AutomaticTaxLiability'NonNullable
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "AutomaticTaxLiability'NonNullable" (\obj -> (GHC.Base.pure AutomaticTaxLiability'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))}
-- | Create a new 'AutomaticTaxLiability'NonNullable' with all required fields.
mkAutomaticTaxLiability'NonNullable :: AutomaticTaxLiability'NonNullable
mkAutomaticTaxLiability'NonNullable = AutomaticTaxLiability'NonNullable{automaticTaxLiability'NonNullableAccount = GHC.Maybe.Nothing,
                                                                        automaticTaxLiability'NonNullableType = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @components.schemas.automatic_tax.properties.liability.anyOf.properties.account.anyOf@ in the specification.
-- 
-- The connected account being referenced when \`type\` is \`account\`.
data AutomaticTaxLiability'NonNullableAccount'Variants =
   AutomaticTaxLiability'NonNullableAccount'Text Data.Text.Internal.Text
  | AutomaticTaxLiability'NonNullableAccount'Account Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AutomaticTaxLiability'NonNullableAccount'Variants
    where {toJSON (AutomaticTaxLiability'NonNullableAccount'Text a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (AutomaticTaxLiability'NonNullableAccount'Account a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON AutomaticTaxLiability'NonNullableAccount'Variants
    where {parseJSON val = case (AutomaticTaxLiability'NonNullableAccount'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((AutomaticTaxLiability'NonNullableAccount'Account Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
-- | Defines the enum schema located at @components.schemas.automatic_tax.properties.liability.anyOf.properties.type@ in the specification.
-- 
-- Type of the account referenced.
data AutomaticTaxLiability'NonNullableType' =
   AutomaticTaxLiability'NonNullableType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | AutomaticTaxLiability'NonNullableType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | AutomaticTaxLiability'NonNullableType'EnumAccount -- ^ Represents the JSON value @"account"@
  | AutomaticTaxLiability'NonNullableType'EnumSelf -- ^ Represents the JSON value @"self"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AutomaticTaxLiability'NonNullableType'
    where {toJSON (AutomaticTaxLiability'NonNullableType'Other val) = val;
           toJSON (AutomaticTaxLiability'NonNullableType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (AutomaticTaxLiability'NonNullableType'EnumAccount) = "account";
           toJSON (AutomaticTaxLiability'NonNullableType'EnumSelf) = "self"}
instance Data.Aeson.Types.FromJSON.FromJSON AutomaticTaxLiability'NonNullableType'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "account" -> AutomaticTaxLiability'NonNullableType'EnumAccount
                                             | val GHC.Classes.== "self" -> AutomaticTaxLiability'NonNullableType'EnumSelf
                                             | GHC.Base.otherwise -> AutomaticTaxLiability'NonNullableType'Other val)}
-- | Defines the enum schema located at @components.schemas.automatic_tax.properties.status@ in the specification.
-- 
-- The status of the most recent automated tax calculation for this invoice.
data AutomaticTaxStatus'NonNullable =
   AutomaticTaxStatus'NonNullableOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | AutomaticTaxStatus'NonNullableTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | AutomaticTaxStatus'NonNullableEnumComplete -- ^ Represents the JSON value @"complete"@
  | AutomaticTaxStatus'NonNullableEnumFailed -- ^ Represents the JSON value @"failed"@
  | AutomaticTaxStatus'NonNullableEnumRequiresLocationInputs -- ^ Represents the JSON value @"requires_location_inputs"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AutomaticTaxStatus'NonNullable
    where {toJSON (AutomaticTaxStatus'NonNullableOther val) = val;
           toJSON (AutomaticTaxStatus'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (AutomaticTaxStatus'NonNullableEnumComplete) = "complete";
           toJSON (AutomaticTaxStatus'NonNullableEnumFailed) = "failed";
           toJSON (AutomaticTaxStatus'NonNullableEnumRequiresLocationInputs) = "requires_location_inputs"}
instance Data.Aeson.Types.FromJSON.FromJSON AutomaticTaxStatus'NonNullable
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "complete" -> AutomaticTaxStatus'NonNullableEnumComplete
                                             | val GHC.Classes.== "failed" -> AutomaticTaxStatus'NonNullableEnumFailed
                                             | val GHC.Classes.== "requires_location_inputs" -> AutomaticTaxStatus'NonNullableEnumRequiresLocationInputs
                                             | GHC.Base.otherwise -> AutomaticTaxStatus'NonNullableOther val)}
