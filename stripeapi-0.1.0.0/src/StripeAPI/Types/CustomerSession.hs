-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema CustomerSession
module StripeAPI.Types.CustomerSession where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.CustomerSessionResourceComponents

-- | Defines the object schema located at @components.schemas.customer_session@ in the specification.
-- 
-- A customer session allows you to grant client access to Stripe\'s frontend SDKs (like StripeJs)
-- control over a customer.
data CustomerSession = CustomerSession {
  -- | client_secret: The client secret of this customer session. Used on the client to set up secure access to the given \`customer\`.
  -- 
  -- The client secret can be used to provide access to \`customer\` from your frontend. It should not be stored, logged, or exposed to anyone other than the relevant customer. Make sure that you have TLS enabled on any page that includes the client secret.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  customerSessionClientSecret :: Data.Text.Internal.Text
  -- | components: Configuration for the components supported by this customer session.
  , customerSessionComponents :: (GHC.Maybe.Maybe CustomerSessionResourceComponents)
  -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
  , customerSessionCreated :: GHC.Types.Int
  -- | customer: The customer the customer session was created for.
  , customerSessionCustomer :: CustomerSessionCustomer'Variants
  -- | expires_at: The timestamp at which this customer session will expire.
  , customerSessionExpiresAt :: GHC.Types.Int
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , customerSessionLivemode :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CustomerSession
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["client_secret" Data.Aeson.Types.ToJSON..= customerSessionClientSecret obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("components" Data.Aeson.Types.ToJSON..=)) (customerSessionComponents obj) : ["created" Data.Aeson.Types.ToJSON..= customerSessionCreated obj] : ["customer" Data.Aeson.Types.ToJSON..= customerSessionCustomer obj] : ["expires_at" Data.Aeson.Types.ToJSON..= customerSessionExpiresAt obj] : ["livemode" Data.Aeson.Types.ToJSON..= customerSessionLivemode obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "customer_session"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["client_secret" Data.Aeson.Types.ToJSON..= customerSessionClientSecret obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("components" Data.Aeson.Types.ToJSON..=)) (customerSessionComponents obj) : ["created" Data.Aeson.Types.ToJSON..= customerSessionCreated obj] : ["customer" Data.Aeson.Types.ToJSON..= customerSessionCustomer obj] : ["expires_at" Data.Aeson.Types.ToJSON..= customerSessionExpiresAt obj] : ["livemode" Data.Aeson.Types.ToJSON..= customerSessionLivemode obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "customer_session"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON CustomerSession
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerSession" (\obj -> (((((GHC.Base.pure CustomerSession GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "components")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode"))}
-- | Create a new 'CustomerSession' with all required fields.
mkCustomerSession :: Data.Text.Internal.Text -- ^ 'customerSessionClientSecret'
  -> GHC.Types.Int -- ^ 'customerSessionCreated'
  -> CustomerSessionCustomer'Variants -- ^ 'customerSessionCustomer'
  -> GHC.Types.Int -- ^ 'customerSessionExpiresAt'
  -> GHC.Types.Bool -- ^ 'customerSessionLivemode'
  -> CustomerSession
mkCustomerSession customerSessionClientSecret customerSessionCreated customerSessionCustomer customerSessionExpiresAt customerSessionLivemode = CustomerSession{customerSessionClientSecret = customerSessionClientSecret,
                                                                                                                                                                customerSessionComponents = GHC.Maybe.Nothing,
                                                                                                                                                                customerSessionCreated = customerSessionCreated,
                                                                                                                                                                customerSessionCustomer = customerSessionCustomer,
                                                                                                                                                                customerSessionExpiresAt = customerSessionExpiresAt,
                                                                                                                                                                customerSessionLivemode = customerSessionLivemode}
-- | Defines the oneOf schema located at @components.schemas.customer_session.properties.customer.anyOf@ in the specification.
-- 
-- The customer the customer session was created for.
data CustomerSessionCustomer'Variants =
   CustomerSessionCustomer'Text Data.Text.Internal.Text
  | CustomerSessionCustomer'Customer Customer
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CustomerSessionCustomer'Variants
    where {toJSON (CustomerSessionCustomer'Text a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CustomerSessionCustomer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON CustomerSessionCustomer'Variants
    where {parseJSON val = case (CustomerSessionCustomer'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CustomerSessionCustomer'Customer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
