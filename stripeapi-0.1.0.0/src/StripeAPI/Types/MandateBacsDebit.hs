-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema MandateBacsDebit
module StripeAPI.Types.MandateBacsDebit where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.mandate_bacs_debit@ in the specification.
-- 
-- 
data MandateBacsDebit = MandateBacsDebit {
  -- | network_status: The status of the mandate on the Bacs network. Can be one of \`pending\`, \`revoked\`, \`refused\`, or \`accepted\`.
  mandateBacsDebitNetworkStatus :: MandateBacsDebitNetworkStatus'
  -- | reference: The unique reference identifying the mandate on the Bacs network.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , mandateBacsDebitReference :: Data.Text.Internal.Text
  -- | revocation_reason: When the mandate is revoked on the Bacs network this field displays the reason for the revocation.
  , mandateBacsDebitRevocationReason :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable MandateBacsDebitRevocationReason'NonNullable))
  -- | url: The URL that will contain the mandate that the customer has signed.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , mandateBacsDebitUrl :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON MandateBacsDebit
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["network_status" Data.Aeson.Types.ToJSON..= mandateBacsDebitNetworkStatus obj] : ["reference" Data.Aeson.Types.ToJSON..= mandateBacsDebitReference obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revocation_reason" Data.Aeson.Types.ToJSON..=)) (mandateBacsDebitRevocationReason obj) : ["url" Data.Aeson.Types.ToJSON..= mandateBacsDebitUrl obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["network_status" Data.Aeson.Types.ToJSON..= mandateBacsDebitNetworkStatus obj] : ["reference" Data.Aeson.Types.ToJSON..= mandateBacsDebitReference obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revocation_reason" Data.Aeson.Types.ToJSON..=)) (mandateBacsDebitRevocationReason obj) : ["url" Data.Aeson.Types.ToJSON..= mandateBacsDebitUrl obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON MandateBacsDebit
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "MandateBacsDebit" (\obj -> (((GHC.Base.pure MandateBacsDebit GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "revocation_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))}
-- | Create a new 'MandateBacsDebit' with all required fields.
mkMandateBacsDebit :: MandateBacsDebitNetworkStatus' -- ^ 'mandateBacsDebitNetworkStatus'
  -> Data.Text.Internal.Text -- ^ 'mandateBacsDebitReference'
  -> Data.Text.Internal.Text -- ^ 'mandateBacsDebitUrl'
  -> MandateBacsDebit
mkMandateBacsDebit mandateBacsDebitNetworkStatus mandateBacsDebitReference mandateBacsDebitUrl = MandateBacsDebit{mandateBacsDebitNetworkStatus = mandateBacsDebitNetworkStatus,
                                                                                                                  mandateBacsDebitReference = mandateBacsDebitReference,
                                                                                                                  mandateBacsDebitRevocationReason = GHC.Maybe.Nothing,
                                                                                                                  mandateBacsDebitUrl = mandateBacsDebitUrl}
-- | Defines the enum schema located at @components.schemas.mandate_bacs_debit.properties.network_status@ in the specification.
-- 
-- The status of the mandate on the Bacs network. Can be one of \`pending\`, \`revoked\`, \`refused\`, or \`accepted\`.
data MandateBacsDebitNetworkStatus' =
   MandateBacsDebitNetworkStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | MandateBacsDebitNetworkStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | MandateBacsDebitNetworkStatus'EnumAccepted -- ^ Represents the JSON value @"accepted"@
  | MandateBacsDebitNetworkStatus'EnumPending -- ^ Represents the JSON value @"pending"@
  | MandateBacsDebitNetworkStatus'EnumRefused -- ^ Represents the JSON value @"refused"@
  | MandateBacsDebitNetworkStatus'EnumRevoked -- ^ Represents the JSON value @"revoked"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON MandateBacsDebitNetworkStatus'
    where {toJSON (MandateBacsDebitNetworkStatus'Other val) = val;
           toJSON (MandateBacsDebitNetworkStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (MandateBacsDebitNetworkStatus'EnumAccepted) = "accepted";
           toJSON (MandateBacsDebitNetworkStatus'EnumPending) = "pending";
           toJSON (MandateBacsDebitNetworkStatus'EnumRefused) = "refused";
           toJSON (MandateBacsDebitNetworkStatus'EnumRevoked) = "revoked"}
instance Data.Aeson.Types.FromJSON.FromJSON MandateBacsDebitNetworkStatus'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "accepted" -> MandateBacsDebitNetworkStatus'EnumAccepted
                                             | val GHC.Classes.== "pending" -> MandateBacsDebitNetworkStatus'EnumPending
                                             | val GHC.Classes.== "refused" -> MandateBacsDebitNetworkStatus'EnumRefused
                                             | val GHC.Classes.== "revoked" -> MandateBacsDebitNetworkStatus'EnumRevoked
                                             | GHC.Base.otherwise -> MandateBacsDebitNetworkStatus'Other val)}
-- | Defines the enum schema located at @components.schemas.mandate_bacs_debit.properties.revocation_reason@ in the specification.
-- 
-- When the mandate is revoked on the Bacs network this field displays the reason for the revocation.
data MandateBacsDebitRevocationReason'NonNullable =
   MandateBacsDebitRevocationReason'NonNullableOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | MandateBacsDebitRevocationReason'NonNullableTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | MandateBacsDebitRevocationReason'NonNullableEnumAccountClosed -- ^ Represents the JSON value @"account_closed"@
  | MandateBacsDebitRevocationReason'NonNullableEnumBankAccountRestricted -- ^ Represents the JSON value @"bank_account_restricted"@
  | MandateBacsDebitRevocationReason'NonNullableEnumBankOwnershipChanged -- ^ Represents the JSON value @"bank_ownership_changed"@
  | MandateBacsDebitRevocationReason'NonNullableEnumCouldNotProcess -- ^ Represents the JSON value @"could_not_process"@
  | MandateBacsDebitRevocationReason'NonNullableEnumDebitNotAuthorized -- ^ Represents the JSON value @"debit_not_authorized"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON MandateBacsDebitRevocationReason'NonNullable
    where {toJSON (MandateBacsDebitRevocationReason'NonNullableOther val) = val;
           toJSON (MandateBacsDebitRevocationReason'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (MandateBacsDebitRevocationReason'NonNullableEnumAccountClosed) = "account_closed";
           toJSON (MandateBacsDebitRevocationReason'NonNullableEnumBankAccountRestricted) = "bank_account_restricted";
           toJSON (MandateBacsDebitRevocationReason'NonNullableEnumBankOwnershipChanged) = "bank_ownership_changed";
           toJSON (MandateBacsDebitRevocationReason'NonNullableEnumCouldNotProcess) = "could_not_process";
           toJSON (MandateBacsDebitRevocationReason'NonNullableEnumDebitNotAuthorized) = "debit_not_authorized"}
instance Data.Aeson.Types.FromJSON.FromJSON MandateBacsDebitRevocationReason'NonNullable
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "account_closed" -> MandateBacsDebitRevocationReason'NonNullableEnumAccountClosed
                                             | val GHC.Classes.== "bank_account_restricted" -> MandateBacsDebitRevocationReason'NonNullableEnumBankAccountRestricted
                                             | val GHC.Classes.== "bank_ownership_changed" -> MandateBacsDebitRevocationReason'NonNullableEnumBankOwnershipChanged
                                             | val GHC.Classes.== "could_not_process" -> MandateBacsDebitRevocationReason'NonNullableEnumCouldNotProcess
                                             | val GHC.Classes.== "debit_not_authorized" -> MandateBacsDebitRevocationReason'NonNullableEnumDebitNotAuthorized
                                             | GHC.Base.otherwise -> MandateBacsDebitRevocationReason'NonNullableOther val)}
